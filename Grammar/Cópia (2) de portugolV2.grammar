Package compilador;

Helpers

tudo = [0..127];

minuscula = ['a'..'z'];
maiuscula = ['A'..'Z'];
letra = [minuscula + maiuscula];
numero = ['0'..'9'];

underline = '_';
tab = 9;
lf = 10;
cr = 13;
quebra = cr | lf | cr lf;
branco = (' ' | tab | quebra)+;
caracter = [tudo - [cr + lf]];

v_string = [[[0..127] - [cr + lf]] - '''];
nao_estrela =    [caracter - '*'] | quebra;
nao_estrela_nao_barra = [caracter - ['*' + '/']] | quebra;
comentario_linha = '//' [tudo - [cr + lf]]* quebra?;
comentario_multi = '/*' nao_estrela+ '*'+ (nao_estrela_nao_barra nao_estrela* '*'+)* '/';

States
normal,
comentario;

Tokens

{normal->comentario, comentario} comentario = '/*';
{comentario} comentario_fim = '*/';
{comentario} comentario_corpo = nao_estrela_nao_barra*;

comentario_linha = comentario_linha;
branco = branco;

programa = 'programa';
inicio = 'inicio';
fim_programa = 'fim.';

doispontos = ':';
virgula = ',';
pontovirgula = ';';
abrecolchete = '[';
fechacolchete = ']';
abreparentese = '(';
fechaparentese = ')';
atribuicao = '<-';

const = 'const';
inteiro = 'inteiro';
real = 'real';
caractere = 'caractere';

n_inteiro = numero+;
n_real = numero+ '.' numero+;
string = ''' v_string* ''';

adicao = '+';
subtracao = '-';
multiplicacao = '*';
divisao = '/';

leia = 'leia';
escreva = 'escreva';
se = 'se';
entao = 'entao';
senao = 'senao';
fimse = 'fim se';
enquanto = 'enquanto';
fimenquanto = 'fim enquanto';
faca = 'faca';
repita = 'repita';
de = 'de';
ate = 'ate';
avalie = 'avalie';
fimavalie = 'fim avalie';
caso = 'caso';
para = 'para';
fimpara = 'fim para';
passo = 'passo';

e = 'e';
ou = 'ou';
xor = 'xor';
igual = '=';
diferente = '<>';
menor = '<';
maior = '>';
menorigual = '<=';
maiorigual = '>=';
negacao = 'nao';

id = (underline | letra)(letra | numero | underline)*;

Ignored Tokens
branco,comentario_linha,comentario;


Productions

    programa =
        programa_inicio declaracao_lista? comando_lista? fim_programa ;

	programa_inicio =
		T.programa id inicio ;					
					
	declaracao_lista =
		{dec_lista} declaracao_lista declaracao |
		{declaracao} declaracao ;

	comando_lista =
		{com_lista} comando_lista comando |
		{comando} comando ;		
	
    declaracao =
        {tipo} tipo doispontos var_virgula_lista? var pontovirgula |
		{const} const id valor pontovirgula;		
		
	tipo =
		{real} real |
		{inteiro} inteiro |
		{caractere} caractere ;
		
	var =
		{id} id | 
		{vetor} id abrecolchete n_inteiro fechacolchete ;	
			
	var_virgula_lista =
		{virgula_lista} var_virgula_lista var_virgula |
		{var_virgula} var_virgula;
	
	var_virgula =
		var virgula;
		
	valor =
		{string} string | 
		{n_real} n_real |
		{n_inteiro} n_inteiro ;
			
	comando =
		{atribuicao} var atribuicao exp pontovirgula |
		{leia} leia abreparentese var_virgula_lista? var fechaparentese pontovirgula |
		{escreva} escreva abreparentese exp_virugla_lista? exp fechaparentese pontovirgula |	
		{se} se abreparentese exp fechaparentese entao comando_op_lista senao_comando? fimse pontovirgula |
		{avalie} avalie abreparentese exp fechaparentese caso_valor_lista? senao_doispontos? fimavalie pontovirgula |
		{enquanto} enquanto abreparentese exp fechaparentese faca comando_op_lista fimenquanto pontovirgula |
		{repita} repita comando_op_lista ate abreparentese exp fechaparentese pontovirgula |
		{para} para_inicio para_fim |
		{passo} para_inicio passo n_inteiro para_fim ;
			
	comando_op_lista =
		{lista} comando_op_lista comando |
		{comando} comando ;	
		
	senao_comando =
		senao comando_op_lista ;
		
	senao_doispontos =
		senao doispontos comando_op_lista ;
		
	caso_valor_lista =
		{caso_valor_lista} caso_valor_lista caso_valor |
		{caso_valor} caso_valor ;
	
	caso_valor = 
		caso valor doispontos comando_op_lista ;
	
	para_inicio =
		para var de n_inteiro ;
		
	para_fim =
		ate n_inteiro faca comando_op_lista fimpara pontovirgula ;
		
	exp_virugla_lista =
		{lista} exp_virugla_lista exp_virgula |
		{exp_virgula} exp_virgula ;
	
	exp_virgula =
		exp virgula;
	
	exp =		
		logica_ou ;
		
	soma_exp =
		{soma} soma_exp soma termo |
		{prox} termo ;	
	
	termo =
		{mult} termo mult negar |
		{prox} negar ;
		
	negar =
		{neg} negacao negar |
		{fatorexp} fator ;
		
	fator =
		{exp} abreparentese exp fechaparentese |
		{valor} valor |
		{var} var ;				
	
	//exp_logica =
		//{log_ou} logica_ou |
		//{exp} abreparentese exp_logica fechaparentese |
		//{negacao_log} negacao exp_logica ;		

	logica_ou =
		{log_xor} logica_xor |
		{log_ou} logica_ou ou logica_xor ;		
		
	logica_xor =
		{log_e} logica_e |
		{log_xor} logica_xor xor logica_e ;
		
	logica_e =
		{log_igualdade} logica_igualdade |
		{log_e} logica_e e logica_igualdade ;			
		
	logica_igualdade =
		{logmaior} logica_maior |
		{logigual} logica_igualdade igualdade logica_maior;
		
	logica_maior =
		{logmenor} logica_menor |
		{logmaior} logica_maior relacional_maior logica_menor;
	
	logica_menor =
		{soma} soma_exp |
		{logmenor} logica_menor relacional_menor soma_exp ;
		
	//negacao
		
	mult =
		{multiplicacao} multiplicacao |
		{divisao} divisao ;	
	
	soma = 
		{adicao} adicao |
		{subtracao} subtracao ;
	
	relacional_menor =
		{menorigual} menorigual |
		{menor} menor ;
	
	relacional_maior =
		{maiorigual} maiorigual | 
		{maior} maior ;
	
	igualdade = 
		{igual} igual |
		{diferente} diferente ;
	//e 
	//xor 
	//ou

	