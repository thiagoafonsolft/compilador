/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseAProgramaInicio(AProgramaInicio node);
    void caseADecListaDeclaracaoLista(ADecListaDeclaracaoLista node);
    void caseADeclaracaoDeclaracaoLista(ADeclaracaoDeclaracaoLista node);
    void caseAComListaComandoLista(AComListaComandoLista node);
    void caseAComandoComandoLista(AComandoComandoLista node);
    void caseATipoDeclaracao(ATipoDeclaracao node);
    void caseAConstDeclaracao(AConstDeclaracao node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseAIdVar(AIdVar node);
    void caseAVetorVar(AVetorVar node);
    void caseAVirgulaListaVarVirgulaLista(AVirgulaListaVarVirgulaLista node);
    void caseAVarVirgulaVarVirgulaLista(AVarVirgulaVarVirgulaLista node);
    void caseAVarVirgula(AVarVirgula node);
    void caseAStringValor(AStringValor node);
    void caseANRealValor(ANRealValor node);
    void caseANInteiroValor(ANInteiroValor node);
    void caseAAtribuicaoComando(AAtribuicaoComando node);
    void caseALeiaComando(ALeiaComando node);
    void caseAEscrevaComando(AEscrevaComando node);
    void caseASeComando(ASeComando node);
    void caseAAvalieComando(AAvalieComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAParaComando(AParaComando node);
    void caseAPassoComando(APassoComando node);
    void caseAListaComandoOpLista(AListaComandoOpLista node);
    void caseAComandoComandoOpLista(AComandoComandoOpLista node);
    void caseASenaoComando(ASenaoComando node);
    void caseASenaoDoispontos(ASenaoDoispontos node);
    void caseACasoValorListaCasoValorLista(ACasoValorListaCasoValorLista node);
    void caseACasoValorCasoValorLista(ACasoValorCasoValorLista node);
    void caseACasoValor(ACasoValor node);
    void caseAParaInicio(AParaInicio node);
    void caseAParaFim(AParaFim node);
    void caseAListaExpViruglaLista(AListaExpViruglaLista node);
    void caseAExpVirgulaExpViruglaLista(AExpVirgulaExpViruglaLista node);
    void caseAExpVirgula(AExpVirgula node);
    void caseAExp(AExp node);
    void caseASomaSomaExp(ASomaSomaExp node);
    void caseAProxSomaExp(AProxSomaExp node);
    void caseAMultTermo(AMultTermo node);
    void caseAProxTermo(AProxTermo node);
    void caseANegNegar(ANegNegar node);
    void caseAFatorexpNegar(AFatorexpNegar node);
    void caseAExpFator(AExpFator node);
    void caseAValorFator(AValorFator node);
    void caseAVarFator(AVarFator node);
    void caseALogXorLogicaOu(ALogXorLogicaOu node);
    void caseALogOuLogicaOu(ALogOuLogicaOu node);
    void caseALogELogicaXor(ALogELogicaXor node);
    void caseALogXorLogicaXor(ALogXorLogicaXor node);
    void caseALogIgualdadeLogicaE(ALogIgualdadeLogicaE node);
    void caseALogELogicaE(ALogELogicaE node);
    void caseALogmaiorLogicaIgualdade(ALogmaiorLogicaIgualdade node);
    void caseALogigualLogicaIgualdade(ALogigualLogicaIgualdade node);
    void caseALogmenorLogicaMaior(ALogmenorLogicaMaior node);
    void caseALogmaiorLogicaMaior(ALogmaiorLogicaMaior node);
    void caseASomaLogicaMenor(ASomaLogicaMenor node);
    void caseALogmenorLogicaMenor(ALogmenorLogicaMenor node);
    void caseAMultiplicacaoMult(AMultiplicacaoMult node);
    void caseADivisaoMult(ADivisaoMult node);
    void caseAAdicaoSoma(AAdicaoSoma node);
    void caseASubtracaoSoma(ASubtracaoSoma node);
    void caseAMenorigualRelacionalMenor(AMenorigualRelacionalMenor node);
    void caseAMenorRelacionalMenor(AMenorRelacionalMenor node);
    void caseAMaiorigualRelacionalMaior(AMaiorigualRelacionalMaior node);
    void caseAMaiorRelacionalMaior(AMaiorRelacionalMaior node);
    void caseAIgualIgualdade(AIgualIgualdade node);
    void caseADiferenteIgualdade(ADiferenteIgualdade node);

    void caseTComentario(TComentario node);
    void caseTComentarioFim(TComentarioFim node);
    void caseTComentarioCorpo(TComentarioCorpo node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTBranco(TBranco node);
    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFimPrograma(TFimPrograma node);
    void caseTDoispontos(TDoispontos node);
    void caseTVirgula(TVirgula node);
    void caseTPontovirgula(TPontovirgula node);
    void caseTAbrecolchete(TAbrecolchete node);
    void caseTFechacolchete(TFechacolchete node);
    void caseTAbreparentese(TAbreparentese node);
    void caseTFechaparentese(TFechaparentese node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTConst(TConst node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTCaractere(TCaractere node);
    void caseTNInteiro(TNInteiro node);
    void caseTNReal(TNReal node);
    void caseTString(TString node);
    void caseTAdicao(TAdicao node);
    void caseTSubtracao(TSubtracao node);
    void caseTMultiplicacao(TMultiplicacao node);
    void caseTDivisao(TDivisao node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimse(TFimse node);
    void caseTEnquanto(TEnquanto node);
    void caseTFimenquanto(TFimenquanto node);
    void caseTFaca(TFaca node);
    void caseTRepita(TRepita node);
    void caseTDe(TDe node);
    void caseTAte(TAte node);
    void caseTAvalie(TAvalie node);
    void caseTFimavalie(TFimavalie node);
    void caseTCaso(TCaso node);
    void caseTPara(TPara node);
    void caseTFimpara(TFimpara node);
    void caseTPasso(TPasso node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTMenorigual(TMenorigual node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTNegacao(TNegacao node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
