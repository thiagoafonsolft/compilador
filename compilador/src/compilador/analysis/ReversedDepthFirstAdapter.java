/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        if(node.getComandoLista() != null)
        {
            node.getComandoLista().apply(this);
        }
        if(node.getDeclaracaoLista() != null)
        {
            node.getDeclaracaoLista().apply(this);
        }
        if(node.getProgramaInicio() != null)
        {
            node.getProgramaInicio().apply(this);
        }
        outAPrograma(node);
    }

    public void inAProgramaInicio(AProgramaInicio node)
    {
        defaultIn(node);
    }

    public void outAProgramaInicio(AProgramaInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaInicio(AProgramaInicio node)
    {
        inAProgramaInicio(node);
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAProgramaInicio(node);
    }

    public void inADecListaDeclaracaoLista(ADecListaDeclaracaoLista node)
    {
        defaultIn(node);
    }

    public void outADecListaDeclaracaoLista(ADecListaDeclaracaoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecListaDeclaracaoLista(ADecListaDeclaracaoLista node)
    {
        inADecListaDeclaracaoLista(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getDeclaracaoLista() != null)
        {
            node.getDeclaracaoLista().apply(this);
        }
        outADecListaDeclaracaoLista(node);
    }

    public void inADeclaracaoDeclaracaoLista(ADeclaracaoDeclaracaoLista node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoDeclaracaoLista(ADeclaracaoDeclaracaoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoDeclaracaoLista(ADeclaracaoDeclaracaoLista node)
    {
        inADeclaracaoDeclaracaoLista(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclaracaoDeclaracaoLista(node);
    }

    public void inAComListaComandoLista(AComListaComandoLista node)
    {
        defaultIn(node);
    }

    public void outAComListaComandoLista(AComListaComandoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComListaComandoLista(AComListaComandoLista node)
    {
        inAComListaComandoLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandoLista() != null)
        {
            node.getComandoLista().apply(this);
        }
        outAComListaComandoLista(node);
    }

    public void inAComandoComandoLista(AComandoComandoLista node)
    {
        defaultIn(node);
    }

    public void outAComandoComandoLista(AComandoComandoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComandoLista(AComandoComandoLista node)
    {
        inAComandoComandoLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoComandoLista(node);
    }

    public void inATipoDeclaracao(ATipoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outATipoDeclaracao(ATipoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoDeclaracao(ATipoDeclaracao node)
    {
        inATipoDeclaracao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarVirgulaLista() != null)
        {
            node.getVarVirgulaLista().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getFechacolchete() != null)
        {
            node.getFechacolchete().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getAbrecolchete() != null)
        {
            node.getAbrecolchete().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAVirgulaListaVarVirgulaLista(AVirgulaListaVarVirgulaLista node)
    {
        defaultIn(node);
    }

    public void outAVirgulaListaVarVirgulaLista(AVirgulaListaVarVirgulaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaListaVarVirgulaLista(AVirgulaListaVarVirgulaLista node)
    {
        inAVirgulaListaVarVirgulaLista(node);
        if(node.getVarVirgula() != null)
        {
            node.getVarVirgula().apply(this);
        }
        if(node.getVarVirgulaLista() != null)
        {
            node.getVarVirgulaLista().apply(this);
        }
        outAVirgulaListaVarVirgulaLista(node);
    }

    public void inAVarVirgulaVarVirgulaLista(AVarVirgulaVarVirgulaLista node)
    {
        defaultIn(node);
    }

    public void outAVarVirgulaVarVirgulaLista(AVarVirgulaVarVirgulaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVirgulaVarVirgulaLista(AVarVirgulaVarVirgulaLista node)
    {
        inAVarVirgulaVarVirgulaLista(node);
        if(node.getVarVirgula() != null)
        {
            node.getVarVirgula().apply(this);
        }
        outAVarVirgulaVarVirgulaLista(node);
    }

    public void inAVarVirgula(AVarVirgula node)
    {
        defaultIn(node);
    }

    public void outAVarVirgula(AVarVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVirgula(AVarVirgula node)
    {
        inAVarVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarVirgula(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANRealValor(ANRealValor node)
    {
        defaultIn(node);
    }

    public void outANRealValor(ANRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealValor(ANRealValor node)
    {
        inANRealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANRealValor(node);
    }

    public void inANInteiroValor(ANInteiroValor node)
    {
        defaultIn(node);
    }

    public void outANInteiroValor(ANInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANInteiroValor(ANInteiroValor node)
    {
        inANInteiroValor(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outANInteiroValor(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarVirgulaLista() != null)
        {
            node.getVarVirgulaLista().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getExpViruglaLista() != null)
        {
            node.getExpViruglaLista().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAEscrevaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimse() != null)
        {
            node.getFimse().apply(this);
        }
        if(node.getSenaoComando() != null)
        {
            node.getSenaoComando().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimavalie() != null)
        {
            node.getFimavalie().apply(this);
        }
        if(node.getSenaoDoispontos() != null)
        {
            node.getSenaoDoispontos().apply(this);
        }
        if(node.getCasoValorLista() != null)
        {
            node.getCasoValorLista().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimenquanto() != null)
        {
            node.getFimenquanto().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getParaFim() != null)
        {
            node.getParaFim().apply(this);
        }
        if(node.getParaInicio() != null)
        {
            node.getParaInicio().apply(this);
        }
        outAParaComando(node);
    }

    public void inAPassoComando(APassoComando node)
    {
        defaultIn(node);
    }

    public void outAPassoComando(APassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassoComando(APassoComando node)
    {
        inAPassoComando(node);
        if(node.getParaFim() != null)
        {
            node.getParaFim().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getParaInicio() != null)
        {
            node.getParaInicio().apply(this);
        }
        outAPassoComando(node);
    }

    public void inAListaComandoOpLista(AListaComandoOpLista node)
    {
        defaultIn(node);
    }

    public void outAListaComandoOpLista(AListaComandoOpLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaComandoOpLista(AListaComandoOpLista node)
    {
        inAListaComandoOpLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        outAListaComandoOpLista(node);
    }

    public void inAComandoComandoOpLista(AComandoComandoOpLista node)
    {
        defaultIn(node);
    }

    public void outAComandoComandoOpLista(AComandoComandoOpLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComandoOpLista(AComandoComandoOpLista node)
    {
        inAComandoComandoOpLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoComandoOpLista(node);
    }

    public void inASenaoComando(ASenaoComando node)
    {
        defaultIn(node);
    }

    public void outASenaoComando(ASenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoComando(ASenaoComando node)
    {
        inASenaoComando(node);
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoComando(node);
    }

    public void inASenaoDoispontos(ASenaoDoispontos node)
    {
        defaultIn(node);
    }

    public void outASenaoDoispontos(ASenaoDoispontos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoDoispontos(ASenaoDoispontos node)
    {
        inASenaoDoispontos(node);
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoDoispontos(node);
    }

    public void inACasoValorListaCasoValorLista(ACasoValorListaCasoValorLista node)
    {
        defaultIn(node);
    }

    public void outACasoValorListaCasoValorLista(ACasoValorListaCasoValorLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoValorListaCasoValorLista(ACasoValorListaCasoValorLista node)
    {
        inACasoValorListaCasoValorLista(node);
        if(node.getCasoValor() != null)
        {
            node.getCasoValor().apply(this);
        }
        if(node.getCasoValorLista() != null)
        {
            node.getCasoValorLista().apply(this);
        }
        outACasoValorListaCasoValorLista(node);
    }

    public void inACasoValorCasoValorLista(ACasoValorCasoValorLista node)
    {
        defaultIn(node);
    }

    public void outACasoValorCasoValorLista(ACasoValorCasoValorLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoValorCasoValorLista(ACasoValorCasoValorLista node)
    {
        inACasoValorCasoValorLista(node);
        if(node.getCasoValor() != null)
        {
            node.getCasoValor().apply(this);
        }
        outACasoValorCasoValorLista(node);
    }

    public void inACasoValor(ACasoValor node)
    {
        defaultIn(node);
    }

    public void outACasoValor(ACasoValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoValor(ACasoValor node)
    {
        inACasoValor(node);
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outACasoValor(node);
    }

    public void inAParaInicio(AParaInicio node)
    {
        defaultIn(node);
    }

    public void outAParaInicio(AParaInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaInicio(AParaInicio node)
    {
        inAParaInicio(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaInicio(node);
    }

    public void inAParaFim(AParaFim node)
    {
        defaultIn(node);
    }

    public void outAParaFim(AParaFim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaFim(AParaFim node)
    {
        inAParaFim(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        outAParaFim(node);
    }

    public void inAListaExpViruglaLista(AListaExpViruglaLista node)
    {
        defaultIn(node);
    }

    public void outAListaExpViruglaLista(AListaExpViruglaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpViruglaLista(AListaExpViruglaLista node)
    {
        inAListaExpViruglaLista(node);
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        if(node.getExpViruglaLista() != null)
        {
            node.getExpViruglaLista().apply(this);
        }
        outAListaExpViruglaLista(node);
    }

    public void inAExpVirgulaExpViruglaLista(AExpVirgulaExpViruglaLista node)
    {
        defaultIn(node);
    }

    public void outAExpVirgulaExpViruglaLista(AExpVirgulaExpViruglaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgulaExpViruglaLista(AExpVirgulaExpViruglaLista node)
    {
        inAExpVirgulaExpViruglaLista(node);
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        outAExpVirgulaExpViruglaLista(node);
    }

    public void inAExpVirgula(AExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpVirgula(AExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgula(AExpVirgula node)
    {
        inAExpVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpVirgula(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getLogicaOu() != null)
        {
            node.getLogicaOu().apply(this);
        }
        outAExp(node);
    }

    public void inASomaSomaExp(ASomaSomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaSomaExp(ASomaSomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaSomaExp(ASomaSomaExp node)
    {
        inASomaSomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getSomaExp() != null)
        {
            node.getSomaExp().apply(this);
        }
        outASomaSomaExp(node);
    }

    public void inAProxSomaExp(AProxSomaExp node)
    {
        defaultIn(node);
    }

    public void outAProxSomaExp(AProxSomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProxSomaExp(AProxSomaExp node)
    {
        inAProxSomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAProxSomaExp(node);
    }

    public void inAMultTermo(AMultTermo node)
    {
        defaultIn(node);
    }

    public void outAMultTermo(AMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermo(AMultTermo node)
    {
        inAMultTermo(node);
        if(node.getNegar() != null)
        {
            node.getNegar().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultTermo(node);
    }

    public void inAProxTermo(AProxTermo node)
    {
        defaultIn(node);
    }

    public void outAProxTermo(AProxTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProxTermo(AProxTermo node)
    {
        inAProxTermo(node);
        if(node.getNegar() != null)
        {
            node.getNegar().apply(this);
        }
        outAProxTermo(node);
    }

    public void inANegNegar(ANegNegar node)
    {
        defaultIn(node);
    }

    public void outANegNegar(ANegNegar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegNegar(ANegNegar node)
    {
        inANegNegar(node);
        if(node.getNegar() != null)
        {
            node.getNegar().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outANegNegar(node);
    }

    public void inAFatorexpNegar(AFatorexpNegar node)
    {
        defaultIn(node);
    }

    public void outAFatorexpNegar(AFatorexpNegar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorexpNegar(AFatorexpNegar node)
    {
        inAFatorexpNegar(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorexpNegar(node);
    }

    public void inAExpFator(AExpFator node)
    {
        defaultIn(node);
    }

    public void outAExpFator(AExpFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFator(AExpFator node)
    {
        inAExpFator(node);
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        outAExpFator(node);
    }

    public void inAValorFator(AValorFator node)
    {
        defaultIn(node);
    }

    public void outAValorFator(AValorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFator(AValorFator node)
    {
        inAValorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFator(node);
    }

    public void inAVarFator(AVarFator node)
    {
        defaultIn(node);
    }

    public void outAVarFator(AVarFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFator(AVarFator node)
    {
        inAVarFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarFator(node);
    }

    public void inALogXorLogicaOu(ALogXorLogicaOu node)
    {
        defaultIn(node);
    }

    public void outALogXorLogicaOu(ALogXorLogicaOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogXorLogicaOu(ALogXorLogicaOu node)
    {
        inALogXorLogicaOu(node);
        if(node.getLogicaXor() != null)
        {
            node.getLogicaXor().apply(this);
        }
        outALogXorLogicaOu(node);
    }

    public void inALogOuLogicaOu(ALogOuLogicaOu node)
    {
        defaultIn(node);
    }

    public void outALogOuLogicaOu(ALogOuLogicaOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogOuLogicaOu(ALogOuLogicaOu node)
    {
        inALogOuLogicaOu(node);
        if(node.getLogicaXor() != null)
        {
            node.getLogicaXor().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getLogicaOu() != null)
        {
            node.getLogicaOu().apply(this);
        }
        outALogOuLogicaOu(node);
    }

    public void inALogELogicaXor(ALogELogicaXor node)
    {
        defaultIn(node);
    }

    public void outALogELogicaXor(ALogELogicaXor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogELogicaXor(ALogELogicaXor node)
    {
        inALogELogicaXor(node);
        if(node.getLogicaE() != null)
        {
            node.getLogicaE().apply(this);
        }
        outALogELogicaXor(node);
    }

    public void inALogXorLogicaXor(ALogXorLogicaXor node)
    {
        defaultIn(node);
    }

    public void outALogXorLogicaXor(ALogXorLogicaXor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogXorLogicaXor(ALogXorLogicaXor node)
    {
        inALogXorLogicaXor(node);
        if(node.getLogicaE() != null)
        {
            node.getLogicaE().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getLogicaXor() != null)
        {
            node.getLogicaXor().apply(this);
        }
        outALogXorLogicaXor(node);
    }

    public void inALogIgualdadeLogicaE(ALogIgualdadeLogicaE node)
    {
        defaultIn(node);
    }

    public void outALogIgualdadeLogicaE(ALogIgualdadeLogicaE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogIgualdadeLogicaE(ALogIgualdadeLogicaE node)
    {
        inALogIgualdadeLogicaE(node);
        if(node.getLogicaIgualdade() != null)
        {
            node.getLogicaIgualdade().apply(this);
        }
        outALogIgualdadeLogicaE(node);
    }

    public void inALogELogicaE(ALogELogicaE node)
    {
        defaultIn(node);
    }

    public void outALogELogicaE(ALogELogicaE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogELogicaE(ALogELogicaE node)
    {
        inALogELogicaE(node);
        if(node.getLogicaIgualdade() != null)
        {
            node.getLogicaIgualdade().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getLogicaE() != null)
        {
            node.getLogicaE().apply(this);
        }
        outALogELogicaE(node);
    }

    public void inALogmaiorLogicaIgualdade(ALogmaiorLogicaIgualdade node)
    {
        defaultIn(node);
    }

    public void outALogmaiorLogicaIgualdade(ALogmaiorLogicaIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogmaiorLogicaIgualdade(ALogmaiorLogicaIgualdade node)
    {
        inALogmaiorLogicaIgualdade(node);
        if(node.getLogicaMaior() != null)
        {
            node.getLogicaMaior().apply(this);
        }
        outALogmaiorLogicaIgualdade(node);
    }

    public void inALogigualLogicaIgualdade(ALogigualLogicaIgualdade node)
    {
        defaultIn(node);
    }

    public void outALogigualLogicaIgualdade(ALogigualLogicaIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogigualLogicaIgualdade(ALogigualLogicaIgualdade node)
    {
        inALogigualLogicaIgualdade(node);
        if(node.getLogicaMaior() != null)
        {
            node.getLogicaMaior().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getLogicaIgualdade() != null)
        {
            node.getLogicaIgualdade().apply(this);
        }
        outALogigualLogicaIgualdade(node);
    }

    public void inALogmenorLogicaMaior(ALogmenorLogicaMaior node)
    {
        defaultIn(node);
    }

    public void outALogmenorLogicaMaior(ALogmenorLogicaMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogmenorLogicaMaior(ALogmenorLogicaMaior node)
    {
        inALogmenorLogicaMaior(node);
        if(node.getLogicaMenor() != null)
        {
            node.getLogicaMenor().apply(this);
        }
        outALogmenorLogicaMaior(node);
    }

    public void inALogmaiorLogicaMaior(ALogmaiorLogicaMaior node)
    {
        defaultIn(node);
    }

    public void outALogmaiorLogicaMaior(ALogmaiorLogicaMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogmaiorLogicaMaior(ALogmaiorLogicaMaior node)
    {
        inALogmaiorLogicaMaior(node);
        if(node.getLogicaMenor() != null)
        {
            node.getLogicaMenor().apply(this);
        }
        if(node.getRelacionalMaior() != null)
        {
            node.getRelacionalMaior().apply(this);
        }
        if(node.getLogicaMaior() != null)
        {
            node.getLogicaMaior().apply(this);
        }
        outALogmaiorLogicaMaior(node);
    }

    public void inASomaLogicaMenor(ASomaLogicaMenor node)
    {
        defaultIn(node);
    }

    public void outASomaLogicaMenor(ASomaLogicaMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaLogicaMenor(ASomaLogicaMenor node)
    {
        inASomaLogicaMenor(node);
        if(node.getSomaExp() != null)
        {
            node.getSomaExp().apply(this);
        }
        outASomaLogicaMenor(node);
    }

    public void inALogmenorLogicaMenor(ALogmenorLogicaMenor node)
    {
        defaultIn(node);
    }

    public void outALogmenorLogicaMenor(ALogmenorLogicaMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogmenorLogicaMenor(ALogmenorLogicaMenor node)
    {
        inALogmenorLogicaMenor(node);
        if(node.getSomaExp() != null)
        {
            node.getSomaExp().apply(this);
        }
        if(node.getRelacionalMenor() != null)
        {
            node.getRelacionalMenor().apply(this);
        }
        if(node.getLogicaMenor() != null)
        {
            node.getLogicaMenor().apply(this);
        }
        outALogmenorLogicaMenor(node);
    }

    public void inAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        inAMultiplicacaoMult(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMultiplicacaoMult(node);
    }

    public void inADivisaoMult(ADivisaoMult node)
    {
        defaultIn(node);
    }

    public void outADivisaoMult(ADivisaoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoMult(ADivisaoMult node)
    {
        inADivisaoMult(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivisaoMult(node);
    }

    public void inAAdicaoSoma(AAdicaoSoma node)
    {
        defaultIn(node);
    }

    public void outAAdicaoSoma(AAdicaoSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdicaoSoma(AAdicaoSoma node)
    {
        inAAdicaoSoma(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outAAdicaoSoma(node);
    }

    public void inASubtracaoSoma(ASubtracaoSoma node)
    {
        defaultIn(node);
    }

    public void outASubtracaoSoma(ASubtracaoSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoSoma(ASubtracaoSoma node)
    {
        inASubtracaoSoma(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outASubtracaoSoma(node);
    }

    public void inAMenorigualRelacionalMenor(AMenorigualRelacionalMenor node)
    {
        defaultIn(node);
    }

    public void outAMenorigualRelacionalMenor(AMenorigualRelacionalMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualRelacionalMenor(AMenorigualRelacionalMenor node)
    {
        inAMenorigualRelacionalMenor(node);
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        outAMenorigualRelacionalMenor(node);
    }

    public void inAMenorRelacionalMenor(AMenorRelacionalMenor node)
    {
        defaultIn(node);
    }

    public void outAMenorRelacionalMenor(AMenorRelacionalMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorRelacionalMenor(AMenorRelacionalMenor node)
    {
        inAMenorRelacionalMenor(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorRelacionalMenor(node);
    }

    public void inAMaiorigualRelacionalMaior(AMaiorigualRelacionalMaior node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualRelacionalMaior(AMaiorigualRelacionalMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualRelacionalMaior(AMaiorigualRelacionalMaior node)
    {
        inAMaiorigualRelacionalMaior(node);
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        outAMaiorigualRelacionalMaior(node);
    }

    public void inAMaiorRelacionalMaior(AMaiorRelacionalMaior node)
    {
        defaultIn(node);
    }

    public void outAMaiorRelacionalMaior(AMaiorRelacionalMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorRelacionalMaior(AMaiorRelacionalMaior node)
    {
        inAMaiorRelacionalMaior(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorRelacionalMaior(node);
    }

    public void inAIgualIgualdade(AIgualIgualdade node)
    {
        defaultIn(node);
    }

    public void outAIgualIgualdade(AIgualIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualIgualdade(AIgualIgualdade node)
    {
        inAIgualIgualdade(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualIgualdade(node);
    }

    public void inADiferenteIgualdade(ADiferenteIgualdade node)
    {
        defaultIn(node);
    }

    public void outADiferenteIgualdade(ADiferenteIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteIgualdade(ADiferenteIgualdade node)
    {
        inADiferenteIgualdade(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiferenteIgualdade(node);
    }
}
